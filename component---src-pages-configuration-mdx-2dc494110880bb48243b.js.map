{"version":3,"sources":["webpack:///./src/pages/configuration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-configuration-mdx-2dc494110880bb48243b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/taplo/taplo/site/src/components/doc-page-layout.tsx\";\nimport { Schemas } from \"../components/schemas\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"configuration-file\"\n    }}>{`Configuration File`}</h1>\n    <p>{`Taplo supports configuration via file, unsurprisingly it uses the TOML format.`}</p>\n    <p>{`By default, every tool looks for one in the working directory or the root of the workspace by the following names (in precedence order):`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.taplo.toml`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`taplo.toml`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"include\"\n    }}>{`Include`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`include`}</inlineCode>{` property is an array of `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Glob_(programming)\"\n      }}>{`glob`}</a>{` path strings that are relative to the working directory (or root of the workspace),\nthe matched files are included in the operations by the tools unless explicitly overwritten. The pattern supports globstars (`}<inlineCode parentName=\"p\">{`**`}</inlineCode>{`) for recursive search.`}</p>\n    <p>{`If this property is omitted, `}<inlineCode parentName=\"p\">{`TOML`}</inlineCode>{` files will be searched in the entire child directory tree from the root, however if it is present but `}<strong parentName=\"p\">{`empty`}</strong>{`, `}<strong parentName=\"p\">{`no files will be included`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`include = [\"Cargo.toml\", \"some_directory/**/*.toml\"]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"exclude\"\n    }}>{`Exclude`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`exclude`}</inlineCode>{` property has the same semantics as `}<inlineCode parentName=\"p\">{`include`}</inlineCode>{` and takes precedence over it.`}</p>\n    <p>{`The following will exclude `}<inlineCode parentName=\"p\">{`Cargo.toml`}</inlineCode>{` from the includes written above, so files matching `}<inlineCode parentName=\"p\">{`some_directory/**/*.toml`}</inlineCode>{` will be included only.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`exclude = [\"Cargo.toml\"]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"formatting-options\"\n    }}>{`Formatting Options`}</h2>\n    <p>{`The following options are used by the formatter, all of them are optional.\nThe given example values are used by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`[formatting]\n# Align consecutive entries vertically.\nalign_entries = false\n\n# Append trailing commas for multi-line arrays.\narray_trailing_comma = true\n\n# Expand arrays to multiple lines that exceed the maximum column width.\narray_auto_expand = true\n\n# Collapse arrays that don't exceed the maximum column width and don't contain comments.\narray_auto_collapse = true\n\n# Omit white space padding from single-line arrays\ncompact_arrays = true\n\n# Omit white space padding from the start and end of inline tables.\ncompact_inline_tables = false\n\n# Maximum column width in characters, affects array expansion and collapse, this doesn't take whitespace into account.\n# Note that this is not set in stone, and works on a best-effort basis.\ncolumn_width = 80\n\n# Indent based on tables and arrays of tables and their subtables, subtables out of order are not indented.\nindent_tables = false\n\n# The substring that is used for indentation, should be tabs or spaces (but technically can be anything).\nindent_string = '  '\n\n# Add trailing newline at the end of the file if not present.\ntrailing_newline = true\n\n# Alphabetically reorder keys that are not separated by empty lines.\nreorder_keys = false\n\n# Maximum amount of allowed consecutive blank lines. This does not affect the whitespace at the end of the document, as it is always stripped.\nallowed_blank_lines = 2\n\n# Use CRLF for line endings.\ncrlf = false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"schema\"\n    }}>{`Schema`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` table consists of only two keys:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`path`}</inlineCode>{`: the path of the schema, this can be either path to a local file or an URL with the schemes `}<inlineCode parentName=\"li\">{`taplo`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`http`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`https`}</inlineCode>{`. (`}<inlineCode parentName=\"li\">{`file`}</inlineCode>{` scheme is also accepted, it is the same as specifying a local path)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`enabled`}</inlineCode>{`: whether to enable the schema or not (`}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` if omitted).`}</li>\n    </ul>\n    <p>{`An example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`[schema]\npath = \"./path/to/schema.json\"\nenabled = true\n`}</code></pre>\n    <p>{`Or a configuration that uses a built-in schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`[schema]\npath = \"taplo://taplo.toml\"\n`}</code></pre>\n    <p>{`Or a remote one:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`[schema]\npath = \"https://example.com/my_schema.json\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rules\"\n    }}>{`Rules`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`rule`}</inlineCode>{` array of tables consist of rules that overwrite the above configuration based on some conditions.\nThus it has the same `}<inlineCode parentName=\"p\">{`formatting`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`schema`}</inlineCode>{` settings, and the `}<inlineCode parentName=\"p\">{`include`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`exclude`}</inlineCode>{` with the same semantics as their `}<a parentName=\"p\" {...{\n        \"href\": \"#include\"\n      }}>{`global variants`}</a>{`, however this time they are used to determine whether the rule applies.`}</p>\n    <p>{`Additionally, `}<inlineCode parentName=\"p\">{`keys`}</inlineCode>{` of a rule is an array of dotted keys that scope the rule to a specific part within a single document.\nThe keys also support glob patterns.`}</p>\n    <p><em parentName=\"p\">{`In case of overlapping rules, the last defined rule is used.`}</em></p>\n    <p>{`Let's say we want to sort our `}<inlineCode parentName=\"p\">{`Cargo`}</inlineCode>{` dependencies, but nothing else, here is how we would do that:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-toml\"\n      }}>{`[formatting]\nreorder_keys = false\n\n[[rule]]\ninclude = [\"**/Cargo.toml\"]\nkeys = [\"dependencies\"]\n\n[rule.formatting]\nreorder_keys = true\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"schemas\"\n    }}>{`Schemas`}</h1>\n    <p>{`Several Taplo tools support additional completion, validation and other features based on `}<a parentName=\"p\" {...{\n        \"href\": \"https://json-schema.org/\"\n      }}>{`JSON schemas`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"using-schemas\"\n    }}>{`Using Schemas`}</h2>\n    <h3 {...{\n      \"id\": \"visual-studio-code\"\n    }}>{`Visual Studio Code`}</h3>\n    <p>{`Schemas can be associated to files in the `}<inlineCode parentName=\"p\">{`evenBetterToml.schema.associations`}</inlineCode>{` configuration object.`}</p>\n    <p>{`In order to associate files with their correct schemas a table of regex patterns and schema URIs is used.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The key must be a regex pattern for an absolute document URI.`}</li>\n      <li parentName=\"ul\">{`The value can be either an absolute URI to the schema, or a path relative to the root of the workspace.`}</li>\n    </ul>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json5\"\n      }}>{`{\n  // The following will match all documents ending with \"test.toml\", and use the \"test.json\" schema\n  // in the root of the workspace.\n  //\n  // The relative path must start with \"./\" and it cannot be omitted.\n  \".*test\\\\\\\\.toml\": \"./test.json\",\n\n  // The following will only match a single specific file with a specific schema:\n  \"file:///path/to/the/file.toml\": \"file:///path/to/the/schema.json\",\n}\n`}</code></pre>\n    <p>{`Currently supported schemes for the schema URIs:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`file`}</inlineCode>{`: a local file`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`taplo`}</inlineCode>{`: a built-in schema bundled with the extension`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`http`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`https`}</inlineCode>{`: a remote schema that can be fetched with a `}<inlineCode parentName=\"li\">{`GET`}</inlineCode>{` request without authentication supported`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"taplo-cli\"\n    }}>{`Taplo CLI`}</h3>\n    <p>{`The CLI supports the `}<inlineCode parentName=\"p\">{`-s`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`--schema`}</inlineCode>{` flag for linting, it also supports schemas in the `}<a parentName=\"p\" {...{\n        \"href\": \"#configuration-file\"\n      }}>{`configuration file`}</a>{`.\nFor more information, visit `}<a parentName=\"p\" {...{\n        \"href\": \"/cli\"\n      }}>{`the cli docs`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"writing-schemas\"\n    }}>{`Writing Schemas`}</h2>\n    <p>{`You can use your own schemas based on one of the most recent `}<a parentName=\"p\" {...{\n        \"href\": \"https://json-schema.org/specification.html\"\n      }}>{`JSON Schema specifications`}</a>{` while working with Taplo.`}</p>\n    <p><em parentName=\"p\"><strong parentName=\"em\">{`Only JSON format is supported`}</strong>{`, schemas written in YAML and other formats must be converted.`}</em></p>\n    <h3 {...{\n      \"id\": \"schema-information\"\n    }}>{`Schema Information`}</h3>\n    <p>{`Along with the common `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` properties, you should also add metadata to your schema under the top-level `}<inlineCode parentName=\"p\">{`x-taplo-info`}</inlineCode>{` property,\nthis is more important when using schemas from a `}<a parentName=\"p\" {...{\n        \"href\": \"#schema-repository\"\n      }}>{`repository`}</a>{`.`}</p>\n    <p>{`An example info extension with all the properties:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"title\": \"My Schema\",\n  \"description\": \"An example schema.\",\n  // Everything is optional.\n  \"x-taplo-info\": {\n    \"authors\": [\"octocat (https://github.com/octocat)\"],\n    \"version\": \"0.1.0\", // Must be SemVer.\n    // The patterns the schema will match, this is tested against\n    // either filepaths or full URIs.\n    \"patterns\": [\".*octocat.toml$\"]\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"schema-extension\"\n    }}>{`Schema Extension`}</h3>\n    <p>{`Every schema object can have an extension with the key `}<inlineCode parentName=\"p\">{`x-taplo`}</inlineCode>{` that will be parsed by Taplo to provide additional hints and features. `}<em parentName=\"p\">{`(`}<inlineCode parentName=\"em\">{`evenBetterToml`}</inlineCode>{` is also accepted but deprecated)`}</em></p>\n    <p>{`All the properties are optional. Here's an example object that has all the properties of the schema extension:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"type\": \"string\",\n  \"title\": \"My Type\",\n  \"enum\": [\"one\", \"two\", \"three\"],\n  \"default\": \"one\",\n  // ...\n  // All the keys in the extension are optional.\n  \"x-taplo\": {\n    // Hide the schema from completion and similar hints.\n    \"hidden\": true,\n    \"docs\": {\n      // Main documentation for the schema, it is expected to be markdown.\n      // If this is omitted, the description will be used.\n      \"main\": \"This is [My Schema](https://example.com/mySchema)\",\n\n      // Documentation of the enum values, these are used when selecting\n      // the values completion or hovering over them.\n      //\n      // These are selected by matching the indices of the enum values.\n      // If a value doesn't have documentation in the middle of the array,\n      // null can be used instead of a string.\n      \"enumValues\": [\n        \"Documentation of 'one'.\",\n        null,\n        \"Documentation of 'three'.\"\n      ],\n\n      // The documentation of the default value, same as the enum docs.\n      \"defaultValue\": \"Documentation of 'one'.\"\n    },\n    \"links\": {\n      // An URL the key will point to if the schema is part of a table.\n      \"key\": \"https://example.com/mySchema\",\n\n      // Different enum values can also have URLs they will point to.\n      // The rules are the same as enum docs.\n      \"enumValues\": [\"https://example.com/one\", \"https://example.com/two\"]\n    },\n    // If the schema is an object, we can hint what\n    // fields are typically important.\n    //\n    // These will be created automatically along with\n    // the required properties during autocompletion.\n    \"initKeys\": [\"importantKey\"]\n  }\n}\n`}</code></pre>\n    <p>{`The extension field can also appear alongside `}<inlineCode parentName=\"p\">{`$ref`}</inlineCode>{`s, in that case it is carried over to the referenced schema overriding its extension if there's any during parsing. This is useful if the same schema has different meanings in different contexts.`}</p>\n    <h3 {...{\n      \"id\": \"limitations-and-unimplemented-features\"\n    }}>{`Limitations and Unimplemented Features`}</h3>\n    <p>{`Only a subset of JSON schema is supported for now with the following rules:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`No external references are allowed in a schema, meaning that a single `}<inlineCode parentName=\"li\">{`json`}</inlineCode>{` file must contain the entire schema with all of its subschemas.`}</li>\n      <li parentName=\"ul\">{`Parsing JSON pointers is not implemented, and they will not work.`}</li>\n      <li parentName=\"ul\">{`The only allowed references must point to subschemas in the `}<inlineCode parentName=\"li\">{`definitions`}</inlineCode>{` of the root of the schema.`}</li>\n    </ul>\n    <p>{`These limitations are likely to be lifted in the future.`}</p>\n    <p>{`For more information about bugs and missing features check the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tamasfe/taplo/labels/schema\"\n      }}>{`issues`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"official-schemas\"\n    }}>{`Official Schemas`}</h2>\n    <h3 {...{\n      \"id\": \"builtin-schemas\"\n    }}>{`Builtin Schemas`}</h3>\n    <p>{`Very few schemas are baked into the tools themselves:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\"><inlineCode parentName=\"em\">{`taplo://taplo.toml`}</inlineCode></em>{`: For the configuration file of the Taplo itself.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"schema-repository\"\n    }}>{`Schema Repository`}</h3>\n    <p>{`Most Taplo tools support fetching schemas from a remote repository. The available schemas are listed in a schema index.`}</p>\n    <p>{`There is an official repository with the index found `}<a parentName=\"p\" {...{\n        \"href\": \"/schema_index.json\"\n      }}>{`here`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"submissions\"\n    }}>{`Submissions`}</h4>\n    <p>{`Submissions and updates to the official repository can be done over `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tamasfe/taplo\"\n      }}>{`GitHub`}</a>{`,\nsimply add your schema to `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tamasfe/taplo/tree/master/schemas\"\n      }}>{`this directory`}</a>{` and create a pull request.`}</p>\n    <h4 {...{\n      \"id\": \"repository-schemas\"\n    }}>{`Repository Schemas`}</h4>\n\n    <Schemas mdxType=\"Schemas\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}