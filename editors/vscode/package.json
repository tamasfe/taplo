{
  "name": "even-better-toml",
  "displayName": "Even Better TOML",
  "description": "Fully-featured TOML support",
  "version": "999.0.0",
  "repository": {
    "url": "https://github.com/tamasfe/taplo"
  },
  "bugs": {
    "url": "https://github.com/tamasfe/taplo/issues"
  },
  "publisher": "tamasfe",
  "author": {
    "name": "tamasfe"
  },
  "preview": true,
  "icon": "taplo-icon.png",
  "galleryBanner": {
    "color": "#731c12",
    "theme": "dark"
  },
  "license": "SEE LICENSE IN LICENSE.md",
  "engines": {
    "vscode": "^1.44.0"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters",
    "Other"
  ],
  "activationEvents": [
    "onLanguage:toml",
    "onLanguage:cargoLock",
    "onCommand:evenBetterToml.pasteTomlAsJson",
    "onCommand:evenBetterToml.copyTomlAsJson",
    "onCommand:evenBetterToml.pasteJsonAsToml",
    "onCommand:evenBetterToml.copyJsonAsToml"
  ],
  "keywords": [
    "toml",
    "syntax",
    "rust",
    "formatter",
    "config"
  ],
  "extensionKind": [
    "workspace"
  ],
  "contributes": {
    "grammars": [
      {
        "language": "toml",
        "scopeName": "source.toml",
        "path": "./toml.tmLanguage.json"
      },
      {
        "scopeName": "markdown.toml.frontmatter.codeblock",
        "path": "./toml.frontmatter.tmLanguage.json",
        "injectTo": [
          "text.html.markdown"
        ]
      },
      {
        "scopeName": "markdown.toml.codeblock",
        "path": "./toml.markdown.tmLanguage.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.toml": "toml"
        }
      }
    ],
    "languages": [
      {
        "id": "toml",
        "aliases": [
          "TOML"
        ],
        "extensions": [
          ".toml"
        ],
        "filenames": [
          "Cargo.lock"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "evenBetterToml.selectSchema",
          "when": "editorLangId == toml"
        },
        {
          "command": "evenBetterToml.copyTomlAsJson",
          "when": "config.evenBetterToml.commands.copyTomlAsJson"
        },
        {
          "command": "evenBetterToml.pasteTomlAsJson",
          "when": "config.evenBetterToml.commands.pasteTomlAsJson"
        },
        {
          "command": "evenBetterToml.pasteJsonAsToml",
          "when": "config.evenBetterToml.commands.pasteJsonAsToml"
        },
        {
          "command": "evenBetterToml.clearCache",
          "when": "config.evenBetterToml.commands.clearCache"
        },
        {
          "command": "evenBetterToml.downloadSchemas",
          "when": "config.evenBetterToml.commands.downloadSchemas"
        },
        {
          "command": "evenBetterToml.debug.showSyntaxTree",
          "when": "editorLangId == toml && config.evenBetterToml.debug"
        }
      ]
    },
    "commands": [
      {
        "command": "evenBetterToml.selectSchema",
        "title": "TOML: Select Schema"
      },
      {
        "command": "evenBetterToml.copyJsonAsToml",
        "title": "TOML: Copy JSON Selection as TOML",
        "enablement": "editorHasSelection"
      },
      {
        "command": "evenBetterToml.pasteTomlAsJson",
        "title": "TOML: Paste as JSON"
      },
      {
        "command": "evenBetterToml.pasteTomlAsJson",
        "title": "TOML: Paste as JSON"
      },
      {
        "command": "evenBetterToml.pasteJsonAsToml",
        "title": "TOML: Paste JSON as TOML"
      }
    ],
    "semanticTokenTypes": [
      {
        "id": "tomlArrayKey",
        "superType": "variable",
        "description": "Keys of regular arrays."
      },
      {
        "id": "tomlTableKey",
        "superType": "variable",
        "description": "Keys of inline tables."
      }
    ],
    "semanticTokenScopes": [
      {
        "scopes": {
          "tomlArrayKey": [
            "variable.key.array.toml"
          ],
          "tomlTableKey": [
            "variable.key.table.toml"
          ]
        }
      }
    ],
    "configuration": {
      "title": "Even Better TOML",
      "properties": {
        "evenBetterToml.taplo.path": {
          "description": "An absolute path to the `taplo` executable.",
          "type": [
            "string",
            "null"
          ],
          "scope": "resource",
          "default": null
        },
        "evenBetterToml.taplo.environment": {
          "type": [
            "object"
          ],
          "scope": "resource",
          "description": "Environment variables for the Taplo LSP executable.",
          "additionalProperties": {
            "type": "string"
          },
          "default": {}
        },
        "evenBetterToml.taplo.extraArgs": {
          "type": [
            "array",
            "null"
          ],
          "scope": "resource",
          "description": "Additional arguments for the Taplo LSP executable.",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "evenBetterToml.taplo.configFile.path": {
          "description": "An absolute, or workspace relative path to the Taplo configuration file.",
          "type": "string",
          "scope": "resource"
        },
        "evenBetterToml.taplo.configFile.enabled": {
          "description": "Whether to enable the usage of a Taplo configuration file.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "evenBetterToml.semanticTokens": {
          "description": "Enable semantic tokens for inline table and array keys.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "evenBetterToml.schema.enabled": {
          "description": "Enable completion and validation based on JSON schemas.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        },
        "evenBetterToml.schema.links": {
          "description": "Whether to show clickable links for keys in the editor.",
          "type": "boolean",
          "scope": "resource",
          "default": false
        },
        "evenBetterToml.schema.catalogs": {
          "description": "A list of URLs to schema catalogs where schemas and associations can be fetched from",
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [
            "https://taplo.tamasfe.dev/schema_index.json",
            "https://www.schemastore.org/api/json/catalog.json"
          ]
        },
        "evenBetterToml.schema.associations": {
          "description": "Document and schema associations.",
          "markdownDescription": "Additional document and schema associations. \n\n The key must be a regular expression, this pattern is used to associate schemas with absolute document URIs. Overlapping patterns result in undefined behaviour and either matching schema can be used. \n\n The value must be an absolute URI to the JSON schema, for supported values and more information [read here](https://taplo.tamasfe.dev/configuration#visual-studio-code).",
          "type": "object",
          "scope": "resource",
          "default": {}
        },
        "evenBetterToml.schema.cache.memoryExpiration": {
          "description": "The amount of seconds after which schemas will be invalidated from memory.",
          "markdownDescription": "The amount of seconds after which schemas will be invalidated from memory. \n**NOTE**: setting too low values will cause performance issues and validation of some schemas will fail.",
          "type": "integer",
          "scope": "resource",
          "minimum": 0,
          "default": 60
        },
        "evenBetterToml.schema.cache.diskExpiration": {
          "description": "The amount of seconds after which cached catalogs and schemas expire and will be attempted to be fetched again.",
          "type": "integer",
          "scope": "resource",
          "minimum": 0,
          "default": 600
        },
        "evenBetterToml.completion.maxKeys": {
          "description": "The maximum amount of keys in a dotted key to display during completion, 0 effectively disables key completions.",
          "type": "integer",
          "scope": "resource",
          "minimum": 0,
          "default": 5
        },
        "evenBetterToml.syntax.semanticTokens": {
          "description": "Whether to enable semantic tokens for tables and arrays.",
          "type": "boolean",
          "scope": "resource",
          "default": true
        }
      }
    }
  },
  "main": "./dist/extension.js",
  "scripts": {
    "build:syntax": "ts-node src/syntax/index.ts",
    "vscode:prepublish": "yarn --ignore-engines build",
    "build": "yarn --ignore-engines rollup --silent -c rollup.config.js"
  },
  "dependencies": {
    "deep-equal": "^2.0.4",
    "encoding": "^0.1.13",
    "vscode-languageclient": "^7.0.0",
    "which": "^2.0.2"
  },
  "devDependencies": {
    "@rollup/plugin-commonjs": "^16.0.0",
    "@rollup/plugin-node-resolve": "^10.0.0",
    "@types/deep-equal": "^1.0.1",
    "@types/node": "^12.12.0",
    "@types/vscode": "^1.44.0",
    "@types/which": "^2.0.1",
    "rollup": "^2.33.1",
    "rollup-plugin-typescript2": "^0.29.0",
    "ts-node": "^8.10.2",
    "typescript": "^4.0.5"
  }
}
